{"title":"超级详细的Maven实用教程","slug":"超级详细的Maven实用教程","date":"2020-10-13T14:42:39.000Z","updated":"2020-10-13T14:48:25.314Z","comments":true,"path":"api/articles/超级详细的Maven实用教程.json","photos":[],"link":"","excerpt":null,"covers":["/2020/10/13/%E8%B6%85%E7%BA%A7%E8%AF%A6%E7%BB%86%E7%9A%84Maven%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/wangqi.blog\\myblog\\source_posts\\超级详细的Maven实用教程\\1.jpg"],"content":"<h2 id=\"什么是Maven？\"><a href=\"#什么是Maven？\" class=\"headerlink\" title=\"什么是Maven？\"></a>什么是Maven？</h2><p>如今我们构建一个项目需要用到很多第三方的类库，如写一个使用Spring的Web项目就需要引入大量的jar包。一个项目Jar包的数量之多往往让我们瞠目结舌，并且Jar包之间的关系错综复杂，一个Jar包往往又会引用其他Jar包，缺少任何一个Jar包都会导致项目编译失败。</p>\n<p>以往开发项目时，程序员往往需要花较多的精力在引用Jar包搭建项目环境上，而这一项工作尤为艰难，少一个Jar包、多一个Jar包往往会报一些让人摸不着头脑的异常。</p>\n<p>而Maven就是一款帮助程序员构建项目的工具，我们只需要告诉Maven需要哪些Jar 包，它会帮助我们下载所有的Jar，极大提升开发效率。</p>\n<h2 id=\"安装Maven-和-Maven的Eclipse插件\"><a href=\"#安装Maven-和-Maven的Eclipse插件\" class=\"headerlink\" title=\"安装Maven 和 Maven的Eclipse插件\"></a>安装Maven 和 Maven的Eclipse插件</h2><p> <a href=\"http://blog.csdn.net/qjyong/article/details/9098213\">安装Maven和Maven的Eclipse插件</a>，用Eclipse的同学可以参考，推荐使用IDEA开发；</p>\n<h2 id=\"Maven规定的目录结构\"><a href=\"#Maven规定的目录结构\" class=\"headerlink\" title=\"Maven规定的目录结构\"></a>Maven规定的目录结构</h2><p>若要使用Maven，那么项目的目录结构必须符合Maven的规范，其目录结构如下：</p>\n<p><img src=\"/2020/10/13/%E8%B6%85%E7%BA%A7%E8%AF%A6%E7%BB%86%E7%9A%84Maven%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/wangqi.blog\\myblog\\source_posts\\超级详细的Maven实用教程\\1.jpg\" alt=\"1\"></p>\n<h2 id=\"Maven基本命令\"><a href=\"#Maven基本命令\" class=\"headerlink\" title=\"Maven基本命令\"></a>Maven基本命令</h2><ol>\n<li><p><strong><em>\\</em>-v\\</strong>:**查询Maven版本</p>\n<p>本命令用于检查maven是否安装成功。</p>\n<p>Maven安装完成之后，在命令行输入*<strong>*mvn -v**</strong>，若出现maven信息，则说明安装成功。</p>\n</li>\n<li><p><strong>compile</strong>：编译</p>\n<p>将java源文件编译成class文件</p>\n</li>\n<li><p><strong>test</strong>:测试项目</p>\n<p>执行test目录下的测试用例</p>\n</li>\n<li><p><strong>package</strong>:打包</p>\n<p>将项目打成jar包</p>\n</li>\n<li><p><strong>clean</strong>:删除target文件夹</p>\n</li>\n<li><p><strong>install</strong>:安装</p>\n<p>将当前项目放到Maven的本地仓库中。供其他项目使用</p>\n</li>\n</ol>\n<h2 id=\"什么是Maven仓库？\"><a href=\"#什么是Maven仓库？\" class=\"headerlink\" title=\"什么是Maven仓库？\"></a>什么是Maven仓库？</h2><p>Maven仓库用来存放Maven管理的所有Jar包。分为：本地仓库 和 中央仓库。</p>\n<ul>\n<li><strong>本地仓库</strong>：Maven本地的Jar包仓库。</li>\n<li><strong>中央仓库</strong>： Maven官方提供的远程仓库。</li>\n</ul>\n<p>当项目编译时，Maven首先从本地仓库中寻找项目所需的Jar包，若本地仓库没有，再到Maven的中央仓库下载所需Jar包。</p>\n<h2 id=\"什么是“坐标”？\"><a href=\"#什么是“坐标”？\" class=\"headerlink\" title=\"什么是“坐标”？\"></a>什么是“坐标”？</h2><p>在Maven中，坐标是Jar包的唯一标识，Maven通过坐标在仓库中找到项目所需的Jar包。</p>\n<p>如下代码中，groupId和artifactId构成了一个Jar包的坐标。</p>\n<dependency>\n   <groupId>cn.missbe.web.search</groupId>\n   <artifactId>resource-search</artifactId>\n   <packaging>jar</packaging>\n   <version>1.0-SNAPSHOT</version>\n</dependency>\n\n<ul>\n<li><strong>groupId</strong>:所需Jar包的项目名</li>\n<li><strong>artifactId</strong>:所需Jar包的模块名</li>\n<li><strong>version</strong>:所需Jar包的版本号</li>\n</ul>\n<h2 id=\"传递依赖-与-排除依赖\"><a href=\"#传递依赖-与-排除依赖\" class=\"headerlink\" title=\"传递依赖 与 排除依赖\"></a>传递依赖 与 排除依赖</h2><ul>\n<li>传递依赖：如果我们的项目引用了一个Jar包，而该Jar包又引用了其他Jar包，那么在默认情况下项目编译时，Maven会把直接引用和简洁引用的Jar包都下载到本地。</li>\n<li>排除依赖：如果我们只想下载直接引用的Jar包，那么需要在pom.xml中做如下配置：(将需要排除的Jar包的坐标写在中)</li>\n</ul>\n<exclusions>\n   <exclusion>\n      <groupId>cn.missbe.web.search</groupId>\n      <artifactId>resource-search</artifactId>\n      <packaging>pom</packaging>\n      <version>1.0-SNAPSHOT</version>\n   </exclusion>\n</exclusions>\n\n<h2 id=\"依赖范围scope\"><a href=\"#依赖范围scope\" class=\"headerlink\" title=\"依赖范围scope\"></a><strong>依赖范围scope</strong></h2><p>在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。<br>- <strong>compile</strong> ：默认范围，用于编译<br>- <strong>provided</strong>：类似于编译，但支持你期待jdk或者容器提供，类似于classpath<br>- <strong>runtime</strong>: 在执行时需要使用<br>- <strong>test</strong>:   用于test任务时使用<br>- <strong>system</strong>: 需要外在提供相应的元素。通过systemPath来取得<br>- <strong>systemPath</strong>: 仅用于范围为system。提供相应的路径<br>- <strong>optional</strong>:  当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用</p>\n<h2 id=\"依赖冲突\"><a href=\"#依赖冲突\" class=\"headerlink\" title=\"依赖冲突\"></a>依赖冲突</h2><p>若项目中多个Jar同时引用了相同的Jar时，会产生依赖冲突，但Maven采用了两种避免冲突的策略，因此在Maven中是不存在依赖冲突的。</p>\n<p><strong>1.短路优先</strong></p>\n<p>本项目——&gt;A.jar——&gt;B.jar——&gt;X.jar<br>本项目——&gt;C.jar——&gt;X.jar</p>\n<p>若本项目引用了A.jar，A.jar又引用了B.jar，B.jar又引用了X.jar，并且C.jar也引用了X.jar。</p>\n<p>在此时，Maven只会引用引用路径最短的Jar。</p>\n<p><strong>2.声明优先</strong></p>\n<p>若引用路径长度相同时，在pom.xml中谁先被声明，就使用谁。</p>\n<h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h2><ol>\n<li><p>什么是聚合？</p>\n<p>将多个项目同时运行就称为聚合。</p>\n</li>\n<li><p>如何实现聚合？</p>\n<p>只需在pom中作如下配置即可实现聚合：</p>\n<modules>\n    <module>web-connection-pool</module>\n    <module>web-java-crawler</module>\n</modules>\n\n<p>继承<br>什么是继承？</p>\n<p>在聚合多个项目时，如果这些被聚合的项目中需要引入相同的Jar，那么可以将这些Jar写入父pom中，各个子项目继承该pom即可。</p>\n<p>如何实现继承？</p>\n<p>父pom配置：将需要继承的Jar包的坐标放入标签即可。</p>\n<dependencyManagement>\n    <dependencies>\n          <dependency>\n            <groupId>cn.missbe.web.search</groupId>\n            <artifactId>resource-search</artifactId>\n            <packaging>pom</packaging>\n            <version>1.0-SNAPSHOT</version>\n          </dependency> \n    </dependencies>\n</dependencyManagement>\n子pom配置：\n<parent>\n      <groupId>父pom所在项目的groupId</groupId>\n      <artifactId>父pom所在项目的artifactId</artifactId>\n      <version>父pom所在项目的版本号</version>\n</parent>\n <parent>\n      <artifactId>resource-search</artifactId>\n      <groupId>cn.missbe.web.search</groupId>\n      <version>1.0-SNAPSHOT</version>\n</parent>\n使用Maven构建Web项目\nNew Maven项目：选择WebApp：\n\n<p>若使用JSP，需添加Servlet依赖：</p>\n<p>注：Servlet依赖只在编译和测试时使用！</p>\n<dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>javax.servlet-api</artifactId>\n    <version>3.0.1</version>\n    <!-- 只在编译和测试时运行 -->\n    <scope>provided</scope>\n</dependency>\n在Bulid Path中设置resource输出目录：\n\n<p>勾选：Dynamic Web Module</p>\n<p>删掉测试目录</p>\n<p>在pom中加入jetty的插件，并设置JDK版本：</p>\n<plugins> \n  <plugin> \n    <groupId>org.apache.maven.plugins</groupId>  \n    <artifactId>maven-compiler-plugin</artifactId>  \n    <configuration> \n      <source>1.8  \n      <target>1.8</target> \n    </configuration> \n  </plugin>  \n  <plugin> \n    <groupId>org.eclipse.jetty</groupId>  \n    <artifactId>jetty-maven-plugin</artifactId>  \n    <version>9.3.10.v20160621</version>  \n    <executions> \n      <execution> \n        <phase>package</phase> \n      </execution> \n    </executions> \n  </plugin> \n</plugins>\n运行项目：\n\n<p>输入：jetty:run</p>\n<p>访问127.0.0.1:8080</p>\n<p>若出现如下界面，表示成功！</p>\n<p>pom.xml详解<br>pom.xml是Maven的核心，你的项目需要什么Jar包就在pom.xml里面配置。当编译项目时Maven读取该文件，并从仓库中下载相应的Jar包。</p>\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemalocation=\"http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd\">  \n  <!--父项目的坐标。如果项目中没有规定某个元素的值，\n那么父项目中的对应值即为项目的默认值。 \n坐标包括group ID，artifact ID和 version。-->  \n  <parent> \n    <!--被继承的父项目的构件标识符-->  \n    <artifactId>  \n    <!--被继承的父项目的全球唯一标识符-->  \n    <groupId>  \n    <!--被继承的父项目的版本-->  \n    <version> \n  </version></groupId></artifactId></parent>  \n  <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，\n但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，\n确保稳定性。-->  \n  <modelVersion>4.0.0</modelVersion>  \n  <!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。\n并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：\n/com/mycompany/app-->  \n  <groupId>cn.missbe.web</groupId>  \n  <!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，\n你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 \n特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，\nMaven为项目产生的构件包括：JARs，源码，二进制发布和WARs等。-->  \n  <artifactId>search-resources</artifactId>  \n  <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建\n他们自己的构件类型，所以前面列的不是全部构件类型-->  \n  <packaging>war</packaging>  \n  <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号-->  \n  <version>1.0-SNAPSHOT</version>  \n  <!--项目的名称, Maven产生的文档用-->  \n  <name>search-resources</name>  \n  <!--项目主页的URL, Maven产生的文档用-->  \n  <url>http://www.missbe.cn</url>  \n  <!-- 项目的详细描述, Maven 产生的文档用。  当这个元素能够用HTML格式描述时\n（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 签）， \n不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，\n你应该修改你自己的索引页文件，而不是调整这里的文档。-->  \n  <description>A maven project to study maven.</description>  \n  <!--描述了这个项目构建环境中的前提条件。-->  \n  <prerequisites> \n    <!--构建该项目或使用该插件所需要的Maven的最低版本-->  \n    <maven> \n  </maven></prerequisites>  \n  <!--构建项目需要的信息-->  \n  <build> \n    <!--该元素设置了项目源码目录，当构建项目的时候，\n构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。-->  \n    <sourceDirectory>  \n    <!--该元素设置了项目脚本源码目录，该目录和源码目录不同：\n绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。-->  \n    <scriptSourceDirectory>  \n    <!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，\n构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。-->  \n    <testSourceDirectory>  \n    <!--被编译过的应用程序class文件存放的目录。-->  \n    <outputDirectory>  \n    <!--被编译过的测试class文件存放的目录。-->  \n    <testOutputDirectory>  \n    <!--使用来自该项目的一系列构建扩展-->  \n    <extensions> \n      <!--描述使用到的构建扩展。-->  \n      <extension> \n        <!--构建扩展的groupId-->  \n        <groupId>  \n        <!--构建扩展的artifactId-->  \n        <artifactId>  \n        <!--构建扩展的版本-->  \n        <version> \n      </version></artifactId></groupId></extension> \n    </extensions>  \n    <!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，\n这些资源被包含在最终的打包文件里。-->  \n    <resources> \n      <!--这个元素描述了项目相关或测试相关的所有资源路径-->  \n      <resource> \n        <!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。\n然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。-->  \n        <targetPath>  \n        <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，\n文件在filters元素里列出。-->  \n        <filtering>  \n        <!--描述存放资源的目录，该路径相对POM路径-->  \n        <directory>  \n        <!--包含的模式列表，例如**/*.xml.-->  \n        <includes>  \n        <!--排除的模式列表，例如**/*.xml-->  \n        <excludes> \n      </excludes></includes></directory></filtering></targetPath></resource> \n    </resources>  \n    <!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。-->  \n    <testResources> \n      <!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明-->  \n      <testResource> \n        <targetPath>\n        <filtering>\n        <directory>\n        <includes>\n        <excludes> \n      </excludes></includes></directory></filtering></targetPath></testResource> \n    </testResources>  \n    <!--构建产生的所有文件存放的目录-->  \n    <directory>  \n    <!--产生的构件的文件名，默认值是${artifactId}-${version}。-->  \n    <finalName>  \n    <!--当filtering开关打开时，使用到的过滤器属性文件列表-->  \n    <filters>  \n    <!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。\n给定插件的任何本地配置都会覆盖这里的配置-->  \n    <pluginManagement> \n      <!--使用的插件列表 。-->  \n      <plugins> \n        <!--plugin元素包含描述插件所需要的信息。-->  \n        <plugin> \n          <!--插件在仓库里的group ID-->  \n          <groupId>  \n          <!--插件在仓库里的artifact ID-->  \n          <artifactId>  \n          <!--被使用的插件的版本（或版本范围）-->  \n          <version>  \n          <!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，\n只有在真需要下载时，该元素才被设置成enabled。-->  \n          <extensions>  \n          <!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。-->  \n          <executions> \n            <!--execution元素包含了插件执行需要的信息-->  \n            <execution> \n              <!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标-->  \n              <id>  \n              <!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段-->  \n              <phase>  \n              <!--配置的执行目标-->  \n              <goals>  \n              <!--配置是否被传播到子POM-->  \n              <inherited>  \n              <!--作为DOM对象的配置-->  \n              <configuration> \n            </configuration></inherited></goals></phase></id></execution> \n          </executions>  \n          <!--项目引入插件所需要的额外依赖-->  \n          <dependencies> \n            <!--参见dependencies/dependency元素-->  \n            <dependency>......</dependency> \n          </dependencies>  \n          <!--任何配置是否被传播到子项目-->  \n          <inherited>  \n          <!--作为DOM对象的配置-->  \n          <configuration> \n        </configuration></inherited></extensions></version></artifactId></groupId></plugin> \n      </plugins> \n    </pluginManagement>  \n    <!--使用的插件列表-->  \n    <plugins> \n      <!--参见build/pluginManagement/plugins/plugin元素-->  \n      <plugin> \n        <groupId>\n        <artifactId>\n        <version>\n        <extensions>  \n        <executions> \n          <execution> \n            <id>\n            <phase>\n            <goals>\n            <inherited>\n            <configuration> \n          </configuration></inherited></goals></phase></id></execution> \n        </executions>  \n        <dependencies> \n          <!--参见dependencies/dependency元素-->  \n          <dependency>......</dependency> \n        </dependencies>  \n        <goals>\n        <inherited>\n        <configuration> \n      </configuration></inherited></goals></extensions></version></artifactId></groupId></plugin> \n    </plugins> \n  </filters></finalName></directory></testOutputDirectory></outputDirectory></testSourceDirectory></scriptSourceDirectory></sourceDirectory></build>  \n  <!--模块（有时称作子项目） 被构建成项目的一部分。\n列出的每个模块元素是指向该模块的目录的相对路径-->  \n  <modules>  \n  <!--发现依赖和扩展的远程仓库列表。-->  \n  <repositories> \n    <!--包含需要连接到远程仓库的信息-->  \n    <repository> \n      <!--如何处理远程仓库里发布版本的下载-->  \n      <releases> \n        <!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 -->  \n        <enabled>  \n        <!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。-->  \n        <updatePolicy>  \n        <!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。-->  \n        <checksumPolicy> \n      </checksumPolicy></updatePolicy></enabled></releases>  \n      <!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，\nPOM就可以在每个单独的仓库中，为每种类型的构件采取不同的 策略。\n例如，可能有人会决定只为开发目的开启对快照版本下载的支持。\n参见repositories/repository/releases元素 -->  \n      <snapshots> \n        <enabled>\n        <updatePolicy>\n        <checksumPolicy> \n      </checksumPolicy></updatePolicy></enabled></snapshots>  \n      <!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库-->  \n      <id>banseon-repository-proxy</id>  \n      <!--远程仓库名称-->  \n      <name>banseon-repository-proxy</name>  \n      <!--远程仓库URL，按protocol://hostname/path形式-->  \n      <url>http://192.168.1.169:9999/repository/</url>  \n      <!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。-->  \n      <layout>default</layout> \n    </repository> \n  </repositories>  \n  <!--发现插件的远程仓库列表，这些插件用于构建和报表-->  \n  <pluginRepositories> \n    <!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素-->  \n    <pluginRepository>......</pluginRepository> \n  </pluginRepositories>  \n  <!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。\n它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。-->  \n  <dependencies> \n    <dependency> \n      <!--依赖的group ID-->  \n      <groupId>org.apache.maven</groupId>  \n      <!--依赖的artifact ID-->  \n      <artifactId>maven-artifact</artifactId>  \n      <!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。-->  \n      <version>3.8.1</version>  \n      <!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外\n。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应，\n 尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。\n如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。-->  \n      <type>jar</type>  \n      <!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。\n分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 JAR，\n一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。-->  \n      <classifier>  \n      <!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。    \n                - compile ：默认范围，用于编译      \n                                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath      \n                                - runtime: 在执行时需要使用      \n                                                - test:    用于test任务时使用      \n                                                - system: 需要外在提供相应的元素。通过systemPath来取得      \n                                                                - systemPath: 仅用于范围为system。提供相应的路径      \n                                                                - optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用-->  \n                              <scope>test</scope>  \n                              <!--仅供system范围使用。注意，不鼓励使用这个元素，\n并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。\n需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。-->  \n                              <systemPath>  \n                              <!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。\n即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题-->  \n                              <exclusions> \n                                        <exclusion> \n                                                  <artifactId>spring-core</artifactId>  \n                                                  <groupId>org.springframework</groupId> \n                                        </exclusion> \n                              </exclusions>  \n                              <!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。-->  \n                              <optional>true</optional> \n                    </systemPath></classifier></dependency> \n          </dependencies>  \n          <!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,\n而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息），\n如果group ID和artifact ID以外的一些信息没有描述，\n则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。-->  \n          <dependencyManagement> \n                    <dependencies> \n                              <!--参见dependencies/dependency元素-->  \n                              <dependency>......</dependency> \n                    </dependencies> \n          </dependencyManagement>  \n          <!--项目分发信息，在执行mvn deploy后表示要发布的位置。\n有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。-->  \n          <distributionManagement> \n                    <!--部署项目产生的构件到远程仓库需要的信息-->  \n                    <repository> \n                              <!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？\n还是每次都使用相同的版本号？参见repositories/repository元素-->  \n                              <uniqueVersion>  \n                              <id>banseon-maven2</id>  \n                              <name>banseon maven2</name>  \n                              <url>file://${basedir}/target/deploy</url>  \n                              <layout> \n                    </layout></uniqueVersion></repository>  \n                    <!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，\n参见distributionManagement/repository元素-->  \n                    <snapshotRepository> \n                              <uniqueVersion>  \n                              <id>banseon-maven2</id>  \n                              <name>Banseon-maven2 Snapshot Repository</name>  \n                              <url>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot</url>  \n                              <layout> \n                    </layout></uniqueVersion></snapshotRepository>  \n                    <!--部署项目的网站需要的信息-->  \n                    <site> \n                              <!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置-->  \n                              <id>banseon-site</id>  \n                              <!--部署位置的名称-->  \n                              <name>business api website</name>  \n                              <!--部署位置的URL，按protocol://hostname/path形式-->  \n                              <url>scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web</url> \n                    </site>  \n                    <!--项目下载页面的URL。如果没有该元素，用户应该参考主页。\n使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。-->  \n                    <downloadUrl>  \n                    <!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，\n因为这是工具自动更新的。有效的值有：none（默认），\nconverted（仓库管理员从 Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。-->  \n                    <status> \n          </status></downloadUrl></distributionManagement>  \n          <!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是<name>value</name>。-->  \n          <properties> \n</properties></modules></project>\n参考原文：[Maven使用详解](https://blog.csdn.net/u010425776/article/details/52027706)\n\n</li>\n</ol>\n<p>转自：<a href=\"https://blog.csdn.net/lovequanquqn/article/details/81627807?ops_request_misc=%7B%22request_id%22:%22160220295319725222439521%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=160220295319725222439521&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v2-2-81627807.first_rank_ecpm_v3_pc_rank_v2&utm_term=maven&spm=1018.2118.3001.4187\">进修的CODER</a></p>\n","categories":[],"tags":[{"name":"Maven","slug":"Maven","count":1,"path":"api/tags/Maven.json"}]}